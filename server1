#include <stdio.h>  
#include <string.h>  
#include <stdlib.h>  
#include <string.h>  
#include <unistd.h>  
#include <sys/types.h>  
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>  
  
#define    MAXLINE        1024  
  
int main(int argc,char **argv)   
{  
    struct sockaddr_in     serv_addr;  
    struct sockaddr_in     clie_addr;  
    char                   buf[MAXLINE];  
    int                    sock_id;  
    int                    link_id;  
    int                    recv_len;  
    int                    write_leng;  
    int                    clie_addr_len;  
    FILE                   *fp;  
  
/*<----输入三项：可执行程序，端口号，文件名--->*/
    if (argc != 3) 
    {  
        printf("usage :%s portnum filename\n", argv[0]);  
        exit(0);
    }  
/*<----------------创建套接字------------------->*/
    if ((sock_id = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    {  
        perror("Create socket failed\n");  
        exit(0);  
    }  
/*<----将套接字绑定到制定的ip，制定端口号>*/
    memset(&serv_addr, 0, sizeof(serv_addr));  
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(atoi(argv[1]));  
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);  
  
    if (bind(sock_id, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0 ) 
    {  
        perror("Bind socket failed\n");  
        exit(0);  
    }  
/*<------监听连接请求-------*/
    if (listen(sock_id, 10) == -1) 
    {  
        perror("Listen socket failed\n");  
        exit(0);  
    }  
/*<------------服务器建立新文件------------->*/
        if ((fp = fopen(argv[2], "a+")) == NULL) 
        {  
            perror("Open file failed\n");  
            exit(0);  
        }  
        clie_addr_len = sizeof(clie_addr); 
/*<--------接收套接字中已建立的连接------->*/        
        link_id = accept(sock_id, (struct sockaddr *)&clie_addr, &clie_addr_len);  
        if (link_id == -1 ) {  
            perror("Accept socket failed\n");  
            exit(0);  
        }  
        //将buffer数组置为0
        bzero(buf, MAXLINE);  
/*<------------通过套接字接受数据------------>*/ 
        while (recv_len = recv(link_id, buf, MAXLINE, 0)) 
        {  
            if(recv_len < 0) 
            {  
                printf("Recieve Data From Server Failed!\n");  
                break;  
            }  
/*<---将收到的数据写入到新建的文件中去--------->*/ 
            write_leng = fwrite(buf, sizeof(char), recv_len, fp);  
            if (write_leng < recv_len) 
            {  
                printf("Write file failed\n");  
                break;  
            }  
            bzero(buf,MAXLINE);  
        }  
        printf("\nFinish Recieve\n");  
        fclose(fp);  
    close(link_id);   
    close(sock_id);   
    return 0;  
}  
