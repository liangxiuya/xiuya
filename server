#include <unistd.h>
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#define PORT 8080
int main(int argc, char const *argv[])
{
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    char hello[20];
      
//创建套接字：使用TCP协议（Socket_STREAM）
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
      
//设置选项值：有助于重用地址和端口。防止错误如:“地址已经在使用”
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,&opt, sizeof(opt)))
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    //服务器绑定到本地主机,因此INADDR_ANY指定IP地址
    address.sin_port = htons( PORT );
//将该套接字绑定到指定的地址和端口号
    if (bind(server_fd, (struct sockaddr *)&address,
                                 sizeof(address))<0)
    {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
//调用listen函数,开始监听链接请求
    if (listen(server_fd, 3) < 0)
    {
        perror("fail to listen");
        exit(EXIT_FAILURE);
    }
//接受链接请求
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address,(socklen_t*)&addrlen))<0)
    {
        perror("fail to accept");
        exit(EXIT_FAILURE);
    }
//读取客户端的传来的信息 
    valread = read( new_socket , buffer, 1024);
    printf("%s\n",buffer );
    printf("Receive message from client!\n");
    scanf("%s",hello);
//利用send函数发送信息给客户端
    send(new_socket , hello , strlen(hello) , 0 );
    printf("Message sent to client!\n");
    return 0;
}
